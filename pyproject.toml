[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["flows"]

[project]
name = "airwatch-mlops"
version = "0.0.1"
description = "MLOps pipeline for air quality prediction and monitoring"
authors = [
  { name = "Siddharth Puranam" },
]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    # Core data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    # Machine Learning
    "scikit-learn>=1.3.0",
    "xgboost>=1.7.0",
    "mlflow>=2.8.0",
    # MLOps and Orchestration
    "prefect>=2.14.0",
    "prefect-aws>=0.4.0",
    # AWS and Cloud
    "boto3>=1.28.0",
    "awscli>=1.29.0",
    # HTTP requests (needed for EPA AQS API)
    "requests>=2.31.0",
    # Data visualization and analysis
    "matplotlib>=3.7.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    "ipython>=8.0.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "tqdm>=4.65.0",
    "typer>=0.9.0",
    "loguru>=0.7.0",
    # Model monitoring
    "evidently==0.6.7",
    # Documentation
    "mkdocs>=1.5.0",
    "types-requests>=2.32.4.20250611",
]

# Modern dependency groups format (preferred by uv)
[dependency-groups]
dev = [
    # Code formatting and linting (Ruff replaces black, isort, flake8, pylint)
    "ruff>=0.1.0",
    # Testing
    "pytest>=7.4.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "requests-mock>=1.11.0",
    "moto[s3]>=4.2.0",
    # Development tools
    "pre-commit>=3.0.0",
    "mypy>=1.0.0",
    "safety>=3.2.9",
    "markdown-it-py>=3.0.0",
    "pymarkdownlnt>=0.9.31",
]

test = [
    "pytest>=7.4.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "requests-mock>=1.11.0",
    "moto[s3]>=4.2.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

# Keep optional-dependencies for backwards compatibility
[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "requests-mock>=1.11.0",
    "moto[s3]>=4.2.0",
    "pre-commit>=3.0.0",
    "mypy>=1.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "requests-mock>=1.11.0",
    "moto[s3]>=4.2.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

all = [
    "airwatch-mlops[dev,test,docs]"
]

# Remove scripts section since we don't have a main package

[tool.ruff]
# Ruff configuration - replaces black, isort, flake8, pylint
line-length = 88
target-version = "py310"

# Exclude directories
exclude = [
    ".git",
    ".venv",
    ".env",
    "venv",
    "env",
    "__pycache__",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented-out code)
    "PL",   # Pylint
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",    # Line too long (handled by line-length)
    "B008",    # Do not perform function calls in argument defaults
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "SIM108",  # Use ternary operator instead of if-else-block
    "C901",    # Function is too complex
    "PLR0912", # Too many branches
    "PLC0415", # Import should be at top-level (we have some intentional local imports)
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around operators
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["flows"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.pylint]
# Pylint-specific configuration
max-args = 8  # Increased from 7 for test methods
max-branches = 15  # Increased from 14
max-returns = 6
max-statements = 60  # Increased from 55 for test methods

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules for test files
"tests/*" = [
    "ARG001",  # Unused function argument (common in fixtures)
    "PLR2004", # Magic value used in comparison (common in tests)
    "SIM117",  # Use a single with statement (not always clearer in tests)
    "PLR0913", # Too many arguments (common in test methods)
    "S101",    # Use of assert (expected in tests)
    "D",       # Docstring rules (less strict for tests)
]
# Ignore import rules for __init__.py files
"__init__.py" = ["F401"]
# Ignore some rules for scripts and flows
"flows/*" = [
    "T201",    # print statements allowed in flows
    "PLR0913", # Many arguments allowed for task functions
    "PLC0415", # Allow local imports in flows (for mlflow, etc.)
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
log_level = "WARNING"  # Suppress INFO logs from prefect and other libraries
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=flows",  # Added coverage for flows directory
    "--cov-report=term-missing",
    "--cov-report=html",
    "--log-cli-level=WARNING",  # Also suppress CLI logging
    "-p", "no:unraisableexception",  # Suppress unraisable exception warnings
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",  # Ignore unraisable exceptions
]

[tool.coverage.run]
source = ["flows"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "flows/mlflow_test.py",
    "flows/register_blocks.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

ignore_missing_imports = true
